<?php

/**
 * @file
 * Domain Directory module file.
 */

/**
 * Implements hook_domain_bootstrap_lookup().
 */
function domain_dir_domain_bootstrap_lookup($domain) {
  global $base_path;
  $full_uri = request_uri();
  $request = substr($full_uri,strpos($full_uri,$base_path)+strlen($base_path));
  $_path = explode('/', $request);
  if (empty($_path[0])) {
    return;
  }
  $dir = $_path[0];
  $active = domain_dir_check($dir);
  if ($active === FALSE) {
    return;
  }
  $new_domain = domain_lookup($active);
  if ($new_domain != -1 && strpos($new_domain['subdomain'],$domain['subdomain'])===0) {
    $domain = $new_domain;
    $domain['domain_dir'] = $dir;
  }
  return $domain;
}

/**
 * Checks for directory / path matching on inbound request.
 *
 * @param $dir
 *  The initial path of the request (i.e. arg(0)).
 *
 * @return
 *  A matching domain_id or FALSE.
 */
function domain_dir_check($dir) {
  $return = &drupal_static(__FUNCTION__);
  if (empty($dir)) {
    return NULL;
  }
  if (isset($return[$dir])) {
    return $return[$dir];
  }
  $return[$dir] = db_query("SELECT domain_id FROM {domain_dir} WHERE dir = :dir", array(':dir' => $dir))->fetchField();
  return $return[$dir];
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Map the incoming directory to a domain path.
 */
function domain_dir_url_inbound_alter(&$path, $original_path, $path_language) {
  $_domain = domain_get_domain();
  if (isset($_domain['domain_dir'])) {
    $_path = explode('/', $original_path);
    if (empty($_path[0]) || $_path[0] != $_domain['domain_dir']) {
      return;
    }
    unset($_path[0]);
    if (empty($_path)) {
      $path = variable_get('site_frontpage', 'node');
    }
    else {
      $path = implode('/', $_path);
    }
    if ($source = drupal_lookup_path('source', $path, $path_language)) {
      $path = $source;
    }
  }
}

/**
 * API wrapper callback for 7.x.2.
 */
function domain_dir_domainload(&$domain) {
  domain_dir_domain_load($domain);
}

/**
 * Implements hook_domain_load().
 */
function domain_dir_domain_load(&$domain) {
  global $base_path, $base_url;
  $dirs = &drupal_static(__FUNCTION__);
  if (!isset($dirs)) {
    $result = db_query("SELECT domain_id, dir FROM {domain_dir}")->FetchAll();
    foreach ($result as $data) {
      $dirs[$data->domain_id][] = $data->dir;
    }
  }
  if (isset($dirs[$domain['domain_id']]) && !isset($domain['canonical_subdomain'])) {
    $temp = $base_url;
    $base_url = '';
    $base = $dirs[$domain['domain_id']][0];
    $subdomain = explode('.', $domain['subdomain']);
    foreach ($dirs[$domain['domain_id']] as $dir) {
      if ($dir == $subdomain[0]) {
        $domain['domain_dir'] = $dir;
        $domain['canonical_subdomain'] = $domain['subdomain'];
        $domain['canonical_path'] = $domain['path'];
        if (empty($base_path)) {
          $domain['subdomain'] = str_replace($dir . '.', '', $domain['subdomain']) . '/' . $dir;
          $domain['path'] = domain_get_path($domain);
        }
        else {
          $domain['subdomain'] = str_replace($dir . '.', '', $domain['subdomain']) . $base_path . $dir . '/';
          $domain['path'] = domain_get_path($domain);
        }
      }
    }
    $base_url = $temp;
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function domain_dir_url_outbound_alter(&$path, &$options, $original_path) {
  global $base_path;
  $domain = domain_get_domain();
  if (!isset($domain['domain_dir'])) {
    $find = '/' . $base_path;
    $path = str_replace($find, '/', $path);
  }
  elseif (!empty($options['absolute'])) {
    $find = '/' . $base_path . $domain['domain_dir'];
    if (substr_count($path, $find) > 0) {
      $path = str_replace($find, '', $path);
    }
    else {
      $find = $base_path . $domain['domain_dir'] .'/';
      $path = str_replace($find, $base_path, $path);
    }
  }
  else {
    if ($path == '<front>' || $path == variable_get('site_frontpage', 'node')) {
      $path = $domain['domain_dir'];
    }
    else {
      $path = $domain['domain_dir'] . '/' . $path;
    }
  }
  // Handle destination=foo.
  if (isset($domain['domain_dir']) && isset($options['query']['destination'])) {
    $options['query']['destination'] = $domain['domain_dir'] . '/' . $options['query']['destination'];
  }
}

/**
 * Adjust the domain editing form.
 */
function domain_dir_form_domain_form_alter(&$form, &$form_state) {
  if (isset($form['#domain']['canonical_subdomain'])) {
    $form['domain']['subdomain']['#default_value'] = $form['#domain']['canonical_subdomain'];
  }
  $form['domain']['domain_dir'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory path'),
    '#default_value' => isset($form['#domain']['domain_dir']) ? $form['#domain']['domain_dir'] : '',
    '#description' => t('Alternate directory path to use for this domain record. Do not include a leading or trailing slash. <p>If using a directory path, register the domain as <em>path.example.com</em>, where example.com is your primary domain.</p>'),
    '#weight' => -1,
  );
  $form['#submit'][] = 'domain_dir_domain_form_submit';
}

/**
 * Save domain directories.
 */
function domain_dir_domain_form_submit(&$form, &$form_state) {
  db_delete('domain_dir')
    ->condition('domain_id', $form_state['values']['domain_id'])
    ->execute();
  if (!empty($form_state['values']['domain_dir'])) {
    $record = array(
      'domain_id' => $form_state['values']['domain_id'],
      'dir' => $form_state['values']['domain_dir'],
      'is_default' => 0,
    );
    drupal_write_record('domain_dir', $record);
  }
}

/**
 * Implements hook_domainupdate().
 *
 * When a {domain} entry is deleted also delete all related {domain_dir} entries.
 */
function domain_dir_domainupdate($op, $domain = array(), $form_state = array()) {
  switch ($op) {
    case 'delete':
      db_delete('domain_dir')
        ->condition('domain_id', $domain['domain_id'])
        ->execute();
      break;
  }
}

/**
 * Ensure that destinations are set properly.
 *
 * This fixes a known issue with the search form.
 */
function domain_dir_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  $_domain = domain_get_domain();
  if (isset($_domain['domain_dir']) && empty($options['external']) && empty($options['absolute'])) {
    $path = $_domain['domain_dir'] . '/' . $path;
  }
}
