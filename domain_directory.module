<?php

/**
 * @file
 * Domain Directory module file.
 */

/**
 * Implements hook_domain_bootstrap_lookup().
 */
function domain_directory_domain_bootstrap_lookup($domain) {
  global $base_path;
  $full_uri = request_uri();
  $request = substr($full_uri,strpos($full_uri,$base_path)+strlen($base_path));
  $_path = explode('/', $request);
  if (empty($_path[0])) {
    return;
  }
  $directory = $_path[0];
  $domain_id = domain_directory_check($directory);
  if ($domain_id) {
    $domain['directory'] = $directory;
    $domain['domain_id'] = $domain_id;
    return $domain;
  }
}

/**
 * Checks for directory / path matching on inbound request.
 *
 * @param $directory
 *  The initial path of the request (i.e. arg(0)).
 *
 * @return
 *  A matching domain_id or FALSE.
 */
function domain_directory_check($directory) {
  $return = &drupal_static(__FUNCTION__);
  if (empty($directory)) {
    return NULL;
  }
  if (isset($return[$directory])) {
    return $return[$directory];
  }
  $return[$directory] = db_query("SELECT domain_id FROM {domain_directory} WHERE directory = :directory", array(':directory' => $directory))->fetchField();
  return $return[$directory];
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Map the incoming directory to a domain path.
 */
function domain_directory_url_inbound_alter(&$path, $original_path, $path_language) {
  $_domain = domain_get_domain();
  if (isset($_domain['directory'])) {
    $_path = explode('/', $original_path);
    if (empty($_path[0]) || $_path[0] != $_domain['directory']) {
      return;
    }
    unset($_path[0]);
    if (empty($_path)) {
      $path = variable_get('site_frontpage', 'node');
    }
    else {
      $path = implode('/', $_path);
    }
    if ($source = drupal_lookup_path('source', $path, $path_language)) {
      $path = $source;
    }
  }
}

/**
 * API wrapper callback for 7.x.2.
 */
function domain_directory_domainload(&$domain) {
  domain_directory_domain_load($domain);
}

/**
 * Implements hook_domain_load().
 */
function domain_directory_domain_load(&$domain) {
  global $base_path, $base_url;
  $directories = &drupal_static(__FUNCTION__);
  if (!isset($directories)) {
    $result = db_query("SELECT domain_id, directory FROM {domain_directory}")->FetchAll();
    foreach ($result as $data) {
      $directories[$data->domain_id][] = $data->directory;
    }
  }
  if (isset($directories[$domain['domain_id']]) && !isset($domain['canonical_subdomain'])) {
    $temp = $base_url;
    $base_url = '';
    $base = $directories[$domain['domain_id']][0];
    $subdomain = explode('.', $domain['subdomain']);
    foreach ($directories[$domain['domain_id']] as $directory) {
      if ($directory == $subdomain[0]) {
        $domain['directory'] = $directory;
        $domain['canonical_subdomain'] = $domain['subdomain'];
        $domain['canonical_path'] = $domain['path'];
        if (empty($base_path)) {
          $domain['subdomain'] = str_replace($directory . '.', '', $domain['subdomain']) . '/' . $directory;
          $domain['path'] = domain_get_path($domain);
        }
        else {
          $domain['subdomain'] = str_replace($directory . '.', '', $domain['subdomain']) . $base_path . $directory . '/';
          $domain['path'] = domain_get_path($domain);
        }
      }
    }
    $base_url = $temp;
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function domain_directory_url_outbound_alter(&$path, &$options, $original_path) {
  global $base_path;

  // Ensure that we do not modify external links.
  if (!empty($options['external']) && domain_directory_is_external($path)) {
    return;
  }

  // Try to modify internal links properly.
  $domain = domain_get_domain();
  if (!isset($domain['directory'])) {
    $find = '/' . $base_path;
    $path = str_replace($find, '/', $path);
  }
  elseif (!empty($options['absolute'])) {
    $find = '/' . $base_path . $domain['directory'];
    if (substr_count($path, $find) > 0) {
      $path = str_replace($find, '', $path);
    }
    else {
      $find = $base_path . $domain['directory'] .'/';
      $path = str_replace($find, $base_path, $path);
    }
  }
  else {
    if ($path == '<front>' || $path == variable_get('site_frontpage', 'node')) {
      $path = $domain['directory'];
    }
    else {
      $path = $domain['directory'] . '/' . $path;
    }
  }

  // Handle destination=foo.
  if (isset($domain['directory']) && isset($options['query']['destination'])) {
    $options['query']['destination'] = $domain['directory'] . '/' . $options['query']['destination'];
  }

}

/**
 * Adjust the domain editing form.
 */
function domain_directory_form_domain_form_alter(&$form, &$form_state) {
  if (isset($form['#domain']['canonical_subdomain'])) {
    $form['subdomain']['#default_value'] = $form['#domain']['canonical_subdomain'];
  }
  $form['directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory path'),
    '#default_value' => isset($form['#domain']['directory']) ? $form['#domain']['directory'] : '',
    '#description' => t('Alternate directory path to use for this domain record. Do not include a leading or trailing slash. <p>If using a directory path, register the domain as <em>path.example.com</em>, where example.com is your primary domain.</p>'),
    '#weight' => -1,
  );
  $form['#submit'][] = 'domain_directory_domain_form_submit';
}

/**
 * Save domain directories.
 */
function domain_directory_domain_form_submit(&$form, &$form_state) {
  db_delete('domain_directory')
    ->condition('domain_id', $form_state['values']['domain_id'])
    ->execute();
  if (!empty($form_state['values']['directory'])) {
    $record = array(
      'domain_id' => $form_state['values']['domain_id'],
      'directory' => $form_state['values']['directory'],
      'is_default' => 0,
    );
    drupal_write_record('domain_directory', $record);
  }
}

/**
 * Implements hook_domainupdate().
 *
 * When a {domain} entry is deleted also delete all related {domain_directory}
 * entries.
 */
function domain_directory_domainupdate($op, $domain = array(), $form_state = array()) {
  switch ($op) {
    case 'delete':
      db_delete('domain_directory')
        ->condition('domain_id', $domain['domain_id'])
        ->execute();
      break;
  }
}

/**
 * Ensure that destinations are set properly.
 *
 * This fixes a known issue with the search form.
 */
function domain_directory_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  $_domain = domain_get_domain();
  if (isset($_domain['directory']) && empty($options['external']) && empty($options['absolute'])) {
    $path = $_domain['directory'] . '/' . $path;
  }
}

/**
 * Determine if a URL is really external to our installation.
 *
 * @param $path
 *  The path being rewritten.
 *
 * @return
 *  Boolean TRUE or FALSE.
 */
function domain_directory_is_external($path) {
  $list = &drupal_static(__FUNCTION__);
  if (empty($list)) {
    $domains = domain_domains();
    foreach ($domains as $domain) {
      $list[$domain['subdomain']] = $domain;
    }
  }
  $parts = @parse_url($path);
  $host = isset($parts['host']) ? strtolower($parts['host']) : '';
  if (!isset($list[$host])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_features_api().
 */
function domain_directory_features_api() {
  $components = array(
    'domain_directory' => array(
      'name' => t('Domain directories'),
      'default_hook' => 'domain_directory_defaults',
      'default_file' => FEATURES_DEFAULTS_CUSTOM,
      'default_filename' => 'domains',
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'domain_directory') .'/domain_directory.features.inc',
    ),
  );
  return $components;
}
